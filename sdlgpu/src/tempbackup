void GPU_BlitOnFramebuffer(struct GPU_Framebuffer *buf, struct GPU_Glsprite *sprite, SDL_Rect *dest)
{
	int i = 0;
	
    glBindTexture(buf->textarget, 0);
    
    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, buf->framebufferID);
    {
     // glPushAttrib(GL_VIEWPORT_BIT); 
     // glViewport(0, 0, 512, 512);
      glViewport(0, 0, 512, 512);
     // glMatrixMode(GL_PROJECTION);
     // glLoadIdentity();
     // gluOrtho2D(0, 2*sprite->rect.w, 0, 2*sprite->rect.h);
     //glOrtho(0, 800, 0, 600, -1, 1);
       //   glOrtho(0, 512, 0, 512, -1, 1);
      //glPushMatrix();
      
      glClearColor(0, 0, 0, 0);
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  
      glBindTexture(sprite->textarget, sprite->texID);
      glEnable(sprite->textarget);
      
      //for (i = 0; i < buf->numshaders; i++){
		//glUseProgramObjectARB( (buf->shaders[i])->program);
		
	  glMatrixMode(GL_MODELVIEW);
      glPushMatrix();
      glLoadIdentity();
		
      glBegin(GL_QUADS);
       // glTexCoord2f(0, 0);				            //glVertex2f(0, 0);
       // glTexCoord2d(sprite->sizex, 0); 			///glVertex2f(sprite->sizex, 0);
        //glTexCoord2d(sprite->sizex, sprite->sizey); //glVertex2f(sprite->sizex, sprite->sizey);
        //glTexCoord2d(0, sprite->sizey);             //glVertex2f(0, sprite->sizey);
            glTexCoord2f(0, 0); glVertex3f(-1, -1, -0.5f);
            glTexCoord2f(1, 0); glVertex3f( 1, -1, -0.5f);
            glTexCoord2f(1, 1); glVertex3f( 1,  1, -0.5f);
            glTexCoord2f(0, 1); glVertex3f(-1,  1, -0.5f);
     glEnd();
     
  //  glMatrixMode(GL_MODELVIEW);
     glPopMatrix();
   //  glMatrixMode(GL_PROJECTION);
    // glPopMatrix();
     
   //  glPopAttrib();
    // glUseProgramObjectARB(0);
    //  }
    glViewport(0, 0, 800, 600);
    
    }
    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);

	
}


void GPU_BlitGlsprite(struct GPU_Glsprite *sprite, SDL_Rect *dest)
{
/*	int destx, desty;
	destx = desty = 0;
	if (dest){
		destx = dest->x;
		desty = dest->y;
	}
	GLint xpad=0, ypad=0;
	//glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	//glEnable(GL_BLEND);
	
	/*glMatrixMode(GL_TEXTURE);
	glPushMatrix();
    glLoadIdentity();
    glOrtho(0, 2*sprite->rect.w, 0, 2*sprite->rect.h, -1, 1);
	
	glMatrixMode(GL_MODELVIEW);
	glPushMatrix();
	glLoadIdentity();
*/
  glViewport(0, 0, 512, 512); 
	glBindTexture(GL_TEXTURE_2D, sprite->texID);
	glEnable(sprite->textarget);
	glBegin(GL_QUADS);
	/*	glColor3f(1.0f, 1.0f, 1.0f);
		glTexCoord2d(xpad, ypad);
			glVertex2d(0+destx, 0+desty);
		glTexCoord2d(xpad + sprite->rect.w, ypad);
			glVertex2d(sprite->rect.w+destx, 0+desty);
		glTexCoord2d(xpad + sprite->rect.w, ypad + sprite->rect.h);
			glVertex2d(sprite->rect.w+destx, sprite->rect.h+desty);
		glTexCoord2d(xpad, ypad + sprite->rect.h);
			glVertex2d(0+destx, sprite->rect.h+desty);*/
			            glTexCoord2f(0, 0); glVertex3f(-1, -1, -0.5f);
            glTexCoord2f(1, 0); glVertex3f( 1, -1, -0.5f);
            glTexCoord2f(1, 1); glVertex3f( 1,  1, -0.5f);
            glTexCoord2f(0, 1); glVertex3f(-1,  1, -0.5f);
	glEnd();																		
	

	//glDrawPixels(sprite->rect.w, sprite->rect.h, GL_RGB, GL_UNSIGNED_BYTE, sprite->image->pixels );
	
	/*glPopMatrix();
	glMatrixMode(GL_TEXTURE);
	glPopMatrix();
	glMatrixMode(GL_MODELVIEW);
	//glDisable(GL_BLEND);	*/
	glDisable(sprite->textarget);
	  glViewport(0, 0, 800, 600); 
}


void GPU_AddShader(struct GPU_Framebuffer *buf , struct GPU_GlShader *shader)
{
	struct GPU_GlShader **list;
	unsigned int count = buf->numshaders;
	
	if (!buf || !shader)
		return;
	
	if (count){
		int k;
		++count;
		list = malloc(sizeof(struct GPU_GlShader)*count); //memory leak ?
		for ( k = 0; k < count-1; k++){
			list[k] = buf->shaders[k];	
		}
		list[count-1] = shader;
		buf->shaders = list;
		buf->numshaders = count;
	}else{
		buf->numshaders = 1;
		list = malloc(sizeof(struct GPU_GlShader)*1); //memory leak ?
		list[0] = shader;
		buf->shaders = list;
	}
	
}